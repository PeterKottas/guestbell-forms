import * as React from 'react';
import './input.scss';
import * as Validators from '../../../validators';
import * as Form from '../../form/Form';
export declare type ValidationError = string | JSX.Element;
export declare type BaseInputProps<HTMLType extends (HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement)> = {
    disabled?: boolean;
    className?: string;
    label?: string | JSX.Element;
    helpText?: string | JSX.Element;
    value?: string;
    onChange?: (e: React.ChangeEvent<HTMLType>, isValid: boolean) => void;
    required?: boolean;
    customValidators?: Validators.IBaseValidator[];
    validators?: ("email" | "number" | "latitude" | "longitude" | "url")[];
    noValidate?: boolean;
    touchOn?: "focus" | "blur";
    ignoreContext?: boolean;
    onTheFlightValidate?: (value: string) => boolean;
    onFocus?: (e: React.SyntheticEvent<{}>) => void;
    onBlur?: () => void;
    title?: string | JSX.Element;
    onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
    errors?: ValidationError[];
    onErrorsChanged?: (errors: ValidationError[]) => void;
    showValidation?: boolean;
};
export interface BaseInputState {
    valid: boolean;
    value: string;
    errors: ValidationError[];
    validator: undefined;
    touched: boolean;
    disabled: boolean;
    focused: boolean;
    handleValueChangeEnabled: boolean;
}
export declare class BaseInput<P extends BaseInputProps<HTMLType>, S extends BaseInputState, HTMLType extends (HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement)> extends React.Component<P, S> {
    context: Form.FormContext;
    inputId: string;
    static defaultProps: BaseInputProps<any>;
    static contextTypes: {
        register: import("prop-types").Requireable<(...args: any[]) => any>;
        unregister: import("prop-types").Requireable<(...args: any[]) => any>;
        isFormValid: import("prop-types").Requireable<(...args: any[]) => any>;
        updateCallback: import("prop-types").Requireable<(...args: any[]) => any>;
        enableInputs: import("prop-types").Requireable<(...args: any[]) => any>;
        disableInputs: import("prop-types").Requireable<(...args: any[]) => any>;
    };
    protected getValidationClass(extraErrors?: ValidationError[]): "validation__success" | "validation__error";
    protected renderDefaultValidation(extraErrors?: ValidationError[]): JSX.Element;
    componentWillUnmount(): void;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: P): void;
    touch(): void;
    unTouch(): void;
    disableInput(): void;
    enableInput(): void;
    private handleValueChange;
    protected handleChange(event: React.ChangeEvent<HTMLType>, isValid?: boolean): void;
    protected handleBlur(e: React.FocusEvent<HTMLType>): void;
    protected handleFocus(e: React.FocusEvent<HTMLType>): void;
    protected getDisabled(): S["disabled"];
    protected setValid(): void;
    protected setInvalid(errors?: ValidationError[]): void;
    protected renderLabel(touchable?: boolean): JSX.Element;
    private renderTooltip;
    protected renderTitle(): P["title"];
    constructor(props: any);
}
export default BaseInput;
