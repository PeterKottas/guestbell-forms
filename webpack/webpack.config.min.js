const path = require('path');
const webpack = require('webpack');
const CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;
var isLocalBuild = process.env.NODE_ENV === 'local';
const merge = require('webpack-merge');
var _ = require('lodash');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = merge(
    {
        customizeArray(a, b, key) {
            if (key === 'plugins') {
                a = _.remove(a, function (plugin) {
                    return !(plugin.filename && plugin.filename === '[name].css');
                });
                return a.concat(b);
            }

            // Fall back to default merging
            return undefined;
        },
        customizeObject(a, b, key) {
            if (key === 'module') {
                a.rules = _.remove(a.rules, function (rule) {
                    return !(rule.test && rule.test.toString() == /\.(scss|css)$/.toString());
                });
                a.rules = a.rules.concat(b.rules);
                return a;
            }

            // Fall back to default merging
            return undefined;
        }
    }
)(require('./webpack.config'), {
    output:
    {
        path: path.join(__dirname, '../build'),
        filename: '[name].min.js',
        publicPath: '/build/', // Webpack dev middleware, if enabled, handles requests for this URL prefix
        libraryTarget: 'umd'
    },
    module: {
        rules: [
            {
                test: /\.(scss|css)$/,
                use: [(isLocalBuild ? {
                    loader: "style-loader",
                    options: {
                        sourceMap: true,
                    }
                } : {
                        loader: MiniCssExtractPlugin.loader
                    }), {
                    loader: "css-loader",
                    options: {
                        sourceMap: true,
                    }
                }, {
                    loader: "postcss-loader",
                    options: {
                        sourceMap: true,
                        plugins: (loader) => [
                            require('autoprefixer')()
                        ]
                    }
                }, {
                    loader: "sass-loader",
                    options: {
                        sourceMap: true,
                    }
                }]
            }
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: "[name].min.css",
        }),
        new BundleAnalyzerPlugin({ analyzerMode: 'static', openAnalyzer: true })
    ],
    mode: 'production',
});
