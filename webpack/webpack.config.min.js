const path = require('path');
const webpack = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;
var isLocalBuild = process.env.NODE_ENV === 'local';
const merge = require('webpack-merge');
var _ = require('lodash');

const extractSass = new ExtractTextPlugin({
    filename: "[name].min.css",
    disable: isLocalBuild
});

module.exports = merge(
    {
        customizeArray(a, b, key) {
            if (key === 'plugins') {
                a = _.remove(a, function (plugin) {
                    return !(plugin.filename && plugin.filename === '[name].css');
                });
                return a.concat(b);
            }

            // Fall back to default merging
            return undefined;
        },
        customizeObject(a, b, key) {
            if (key === 'module') {
                a.rules = _.remove(a.rules, function (rule) {
                    return !(rule.test && rule.test.toString() == /\.(scss|css)$/.toString());
                });
                a.rules = a.rules.concat(b.rules);
                return a;
            }

            // Fall back to default merging
            return undefined;
        }
    }
)(require('./webpack.config'), {
    output:
    {
        path: path.join(__dirname, '../build'),
        filename: '[name].min.js',
        publicPath: '/build/', // Webpack dev middleware, if enabled, handles requests for this URL prefix
        libraryTarget: 'umd'
    },
    module: {
        rules: [
            {
                test: /\.(scss|css)$/,
                use: extractSass.extract({
                    use: [{
                        loader: "css-loader",
                        options: {
                            sourceMap: true,
                            minimize: true
                        }
                    },
                    {
                        loader: "postcss-loader",
                        options: {
                            sourceMap: true,
                            plugins: (loader) => [
                                require('autoprefixer')()
                            ]
                        }
                    },
                    {
                        loader: "sass-loader",
                        options: {
                            sourceMap: true,
                        }
                    }],
                    // use style-loader in development
                    fallback: "style-loader"
                })
            }
        ]
    },
    plugins: [
        extractSass,
        new webpack.optimize.UglifyJsPlugin(
            {
                comments: false,
                compress:
                {
                    // remove warnings
                    warnings: false,
                    // Drop console statements
                    drop_console: true
                },
                sourceMap: true
            })
    ]
});
